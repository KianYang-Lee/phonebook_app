{"version":3,"sources":["components/Person.js","components/Filter.js","components/PersonForm.js","services/persons.js","components/Notification.js","components/ErrorNotification.js","App.js","index.js"],"names":["Person","person","handleDeletePerson","name","number","onClick","Filter","onChange","filter","value","PersonForm","addName","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","personObject","post","delete","id","put","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","ErrorNotification","errorMessage","App","useState","persons","setPersons","setNewName","setNewNumber","newFilter","setNewFilter","setMessage","setErrorMessage","useEffect","personService","initialPersons","window","confirm","person_obj","filteredPersons","toLowerCase","includes","event","target","preventDefault","some","alert","find","returnedPerson","map","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f9ab071.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({ person, handleDeletePerson }) => {\n  return (\n    <div>\n      {person.name} {person.number}\n      <button onClick={() => handleDeletePerson(person)}>\n        delete\n      </button>\n    </div>\n  );\n};\n\nexport default Person;","import React from 'react';\n\nconst Filter = ({ onChange, filter }) => {\n  return (\n    <p>filter shown with <input onChange={onChange} value={filter} /></p>\n  );\n};\n\nexport default Filter;","import React from \"react\";\n\nconst PersonForm = ({ addName, newName, newNumber, handleNameChange, handleNumberChange }) => {\n  return (\n    <form onSubmit={addName}>\n      <div>name: <input value={newName} onChange={handleNameChange} /></div>\n      <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div><button type='submit'>add</button></div>\n    </form>\n  );\n};\n\nexport default PersonForm;","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = (personObject) => {\n  const request = axios.post(baseUrl, personObject);\n  return request.then(response => response.data);\n};\n\nconst remove = (person) => {\n  const request = axios.delete(`${baseUrl}/${person.id}`);\n  return request.then(response => response.data);\n};\n\nconst modify = (id, personObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, personObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, remove, modify };","const Notification = ({ message }) => {\n  const notificationStyle = {\n    color: \"green\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n  if (message === null) {\n    return null;\n  }\n  return (\n    <div style={notificationStyle}>\n      {message}\n    </div>\n  );\n};\n\nexport default Notification;","const ErrorNotification = ({ errorMessage }) => {\n  const notificationStyle = {\n    color: \"red\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  };\n  if (errorMessage === null) {\n    return null;\n  }\n  return (\n    <div style={notificationStyle}>\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default ErrorNotification;","// // ---------------- 2.19 PHONEBOOK STEP 11 -------------------- //\n// // Use the improved error message to show a notification that lasts for a few\n// //  seconds after a successful operation is executed (a person is added or a\n// //  number is changed)\n\n// import React, { useState, useEffect } from 'react';\n// import Person from './components/Person';\n// import Filter from './components/Filter';\n// import PersonForm from './components/PersonForm';\n// import personService from './services/persons';\n// import Notification from './components/Notification';\n\n\n// const App = () => {\n//   const [persons, setPersons] = useState([]);\n//   const [newName, setNewName] = useState('');\n//   const [newNumber, setNewNumber] = useState('');\n//   const [newFilter, setNewFilter] = useState('');\n//   const [message, setMessage] = useState(null);\n\n//   useEffect(() => {\n//     personService\n//       .getAll()\n//       .then(initialPersons => {\n//         setPersons(initialPersons);\n//       });\n//   }, []);\n\n//   const handleNameChange = (event) => {\n//     setNewName(event.target.value);\n//   };\n\n//   const handleNumberChange = (event) => {\n//     setNewNumber(event.target.value);\n//   };\n\n//   const handleFilterChange = (event) => {\n//     setNewFilter(event.target.value);\n//   };\n\n//   const handleDeletePerson = (person) => {\n//     if (window.confirm(`Delete ${person.name}?`)) {\n//       personService\n//         .remove(person)\n//         .then(\n//           personService\n//             .getAll()\n//             .then(\n//               () => {\n//                 setPersons(persons.filter(person_obj => person_obj.id !== person.id));\n//               }\n//             )\n//         );\n//     }\n//   };\n\n\n//   const addName = (event) => {\n//     event.preventDefault();\n//     const validateNameDuplicates = persons.some(person => person.name === newName);\n//     if (validateNameDuplicates) {\n//       // template strings use backtick\n//       window.alert(`${newName} is already added to phonebook`);\n//       if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n//         const person = persons.find(person => person.name === newName);\n//         const id = person.id;\n//         const personObject = { ...person, number: newNumber };\n//         personService\n//           .modify(id, personObject)\n//           .then(returnedPerson => {\n//             setPersons(persons.map(person => person.id !== id ? person : returnedPerson));\n//             setMessage(`Modified ${returnedPerson.name}'s phone number`);\n//             setTimeout(() => setMessage(null), 5000);\n//           }\n//           );\n//       }\n//     } else {\n//       const personObject = {\n//         name: newName,\n//         number: newNumber\n//       };\n//       personService\n//         .create(personObject)\n//         .then(returnedPerson => {\n//           setPersons(persons.concat(returnedPerson));\n//           setNewName('');\n//           setNewNumber('');\n//           setMessage(`Added ${returnedPerson.name}`);\n//           setTimeout(() => setMessage(null), 5000);\n//         });\n//     }\n//   };\n\n//   const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()));\n\n//   return (\n//     <div>\n//       <h2>Phonebook</h2>\n//       <Notification message={message} />\n//       <Filter filter={newFilter} onChange={handleFilterChange} />\n//       <h2>add a new</h2>\n//       <PersonForm addName={addName} newName={newName} newNumber={newNumber}\n//         handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}\n//       />\n//       <h2>Numbers</h2>\n//       {filteredPersons.map(person => {\n//         return (\n//           <Person\n//             key={person.name}\n//             person={person}\n//             handleDeletePerson={handleDeletePerson} />);\n//       })}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// ---------------- 2.20 PHONEBOOK STEP 12 -------------------- //\n// Handle delete person\n\nimport React, { useState, useEffect } from 'react';\nimport Person from './components/Person';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\nimport ErrorNotification from './components/ErrorNotification';\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [message, setMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      });\n  }, []);\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  };\n\n  const handleDeletePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(person)\n        .then(\n          personService\n            .getAll()\n            .then(\n              () => {\n                setPersons(persons.filter(person_obj => person_obj.id !== person.id));\n              }\n            )\n        );\n    }\n  };\n\n\n  const addName = (event) => {\n    event.preventDefault();\n    const validateNameDuplicates = persons.some(person => person.name === newName);\n    if (validateNameDuplicates) {\n      // template strings use backtick\n      window.alert(`${newName} is already added to phonebook`);\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(person => person.name === newName);\n        const id = person.id;\n        const personObject = { ...person, number: newNumber };\n        personService\n          .modify(id, personObject)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== id ? person : returnedPerson));\n            setMessage(`Modified ${returnedPerson.name}'s phone number`);\n            setTimeout(() => setMessage(null), 5000);\n          }\n          )\n          .catch(error => {\n            setErrorMessage(`Information of ${personObject.name} has \n            already been removed from server`);\n            setTimeout(() => setErrorMessage(null), 5000);\n          });\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      };\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setNewName('');\n          setNewNumber('');\n          setMessage(`Added ${returnedPerson.name}`);\n          setTimeout(() => setMessage(null), 5000);\n        });\n    }\n  };\n\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()));\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ErrorNotification errorMessage={errorMessage} />\n      <Notification message={message} />\n      <Filter filter={newFilter} onChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber}\n        handleNameChange={handleNameChange} handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      {filteredPersons.map(person => {\n        return (\n          <Person\n            key={person.name}\n            person={person}\n            handleDeletePerson={handleDeletePerson} />);\n      })}\n    </div>\n  );\n};\n\nexport default App;","import ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}